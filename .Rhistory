IQR(area)
min(area)
count
area < 1500
summary(area)
samp0 <- sample(area, 100)
samp1 <- sample(area, 1000)
mean(samp1)
mean(samp0)
ss <- rep(NA,2)
ss
ss <- rep(NA,5)
ss
sample_means_small <- rep(NA, 100)
for (i in 1:100) {}
for (i in 1:100) { }
for (i in 1:100) {
samp <- sample(area,50)
sample_means_small <- mean(samp)
print(i)
}
sample_means_small
sample_means_small <- rep(NA, 100)
sample_means_small
for (i in 1:100) {
samp <- sample(area,50)
sample_means_small[i] <- mean(samp)
print(i)
}
sample_means_small
sample_means50 <- rep(NA,5000)
for (i in 1:5000) {
samp <- sample(area,50)
sample_means50[i] <- mean(samp)
}
sample_means50
hist(sample_means50)
sample_means10 <- rep(NA, 5000)
sample_means100 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(area, 10)
sample_means10[i] <- mean(samp)
samp <- sample(area, 100)
sample_means100[i] <- mean(samp)
}
sample_means10
par(mfrow = c(3, 1))
xlimits = range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
load(url("http://www.openintro.org/stat/data/ames.RData"))
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
sample_mean <- mean(samp)
sample_mean
summary(population)
se <- sd(samp) / sqrt(60)
lower <- sample_mean - 1.96 *se
upper <- sample_mean + 1.96 *se
c(lower,upper)
mean(population)
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the population
samp_mean[i] <- mean(samp)    # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp)        # save sample sd in ith element of samp_sd
}
lower <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower[1],upper[1])
plot_ci(lower, upper, mean(population))
getwd()
setwd('Documents')
setwd('Fun')
getwd()
setwd('Coursera-JH-Data-Science')
setwd('getdata')
dtp <- read.csv('getdata-data-ss06hid.csv')
summary(dtp)
? count
str(dtp)
nrow(housing[housing$VAL==24])
nrow(dtp[dtp$VAL==24])
dtp$VAL
dtp[dtp$VAL==24,]
dtp[dtp$VAL==24 & !is.na(dtp$VAL),]
nrow(dtp[dtp$VAL==24 & !is.na(dtp$VAL),])
rows <- 18:23
cols <- 7:15
dat <- read.xlsx(f, 1, colIndex = cols, rowIndex = rows)
require(xlsx)
install.packages('XLConnect')
dat <- read.xlsx(f, 1, colIndex = cols, rowIndex = rows)
require(xlsx)
library(xlsx)
f <- "DATA.gov_NGAP.xlsx
"
f <- "DATA.gov_NGAP.xlsx"
f
library(XLConnect)
library(xlsx)
install.packages("xlsx")
library(xlsx)
dat <- read.xlsx(f, 1, colIndex = cols, rowIndex = rows)
getwd()
f <- "getdata-data-DATA.gov_NGAP.xlsx"
dat <- read.xlsx(f, 1, colIndex = cols, rowIndex = rows)
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
install.packages("XML")
library(XML)
library(curl)
library(RCurl)
urlXML <- https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml
urlXML <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData<-getURL(urlXML, ssl.verifypeer=FALSE)
doc<-xmlParse(xData)
roots<-xmlRoot(doc)
xmlName(roots)
zips<-xpathSApply(roots, "//zipcode",xmlValue)
length(zips[zips=="21231"])
fileUrl1 <-  "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url=fileUrl1, destfile="fsspid.csv", mode="w", method="curl")
library(data.table)
DT <- fread(input="fsspid.csv", sep=",")
install.packages("data.table")
library(data.table)
DT <- fread(input="fsspid.csv", sep=",")
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(rowMeans(DT)[DT$SEX==1])
system.time(rowMeans(DT)[DT$SEX==1])
system.time(rowMeans(DT)[DT$SEX==2])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(DT[,mean(pwgtp15),by=SEX])
t1 <- system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
t2 <- system.time(rowMeans(DT)[DT$SEX==1])+system.time(rowMeans(DT)[DT$SEX==2])
t3 <- system.time(tapply(DT$pwgtp15,DT$SEX,mean))
t4 <- system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
t5 <- system.time(mean(DT$pwgtp15,by=DT$SEX))
t6 <- system.time(DT[,mean(pwgtp15),by=SEX])
t1
tq[elapsed]
t1[elapsed]
t1$elapsed
t1['elapsed']
t1['elapsed'][1]
t1['elapsed'][[1]]
t2['elapsed'][[1]]
t3['elapsed'][[1]]
t4['elapsed'][[1]]
t5['elapsed'][[1]]
t6['elapsed'][[1]]
t3['elapsed'][[1]] < t4['elapsed'][[1]]
t4['elapsed'][[1]] < t6['elapsed'][[1]]
t6['elapsed'][[1]] <  t1['elapsed'][[1]]
t6['elapsed'][[1]] < t5['elapsed'][[1]]
t2 <- system.time(rowMeans(DT)[DT$SEX==1])+system.time(rowMeans(DT)[DT$SEX==2])
for i in 1:1000 {
}
for i in 1:1000 {
t1 <- t1 + system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
t3 <- t3 + system.time(tapply(DT$pwgtp15,DT$SEX,mean))
t4 <- t4 + system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
t5 <- t5 + system.time(mean(DT$pwgtp15,by=DT$SEX))
t6 <- t6 + system.time(DT[,mean(pwgtp15),by=SEX])
}
t1
t1 <- system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
t3 <- system.time(tapply(DT$pwgtp15,DT$SEX,mean))
t4 <- system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
t5 <- system.time(mean(DT$pwgtp15,by=DT$SEX))
t6 <- system.time(DT[,mean(pwgtp15),by=SEX])
for (i in 1:1000) {
t1 <- t1 + system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
t3 <- t3 + system.time(tapply(DT$pwgtp15,DT$SEX,mean))
t4 <- t4 + system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
t5 <- t5 + system.time(mean(DT$pwgtp15,by=DT$SEX))
t6 <- t6 + system.time(DT[,mean(pwgtp15),by=SEX])
}
t1 <- system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
t3 <- system.time(tapply(DT$pwgtp15,DT$SEX,mean))
t4 <- system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
t5 <- system.time(mean(DT$pwgtp15,by=DT$SEX))
t6 <- system.time(DT[,mean(pwgtp15),by=SEX])
for (i in 1:10) {
t1 <- t1 + system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
t3 <- t3 + system.time(tapply(DT$pwgtp15,DT$SEX,mean))
t4 <- t4 + system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
t5 <- t5 + system.time(mean(DT$pwgtp15,by=DT$SEX))
t6 <- t6 + system.time(DT[,mean(pwgtp15),by=SEX])
}
for (i in 1:10) {
t1 <- t1 + system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
t3 <- t3 + system.time(tapply(DT$pwgtp15,DT$SEX,mean))
t4 <- t4 + system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
t5 <- t5 + system.time(mean(DT$pwgtp15,by=DT$SEX))
t6 <- t6 + system.time(DT[,mean(pwgtp15),by=SEX])
}
t6['elapsed'][[1]] <  t1['elapsed'][[1]]
t6['elapsed'][[1]] <  t3['elapsed'][[1]]
t6['elapsed'][[1]] <  t4['elapsed'][[1]]
t6['elapsed'][[1]] <  t5['elapsed'][[1]]
t4['elapsed'][[1]] <  t5['elapsed'][[1]]
t5['elapsed'][[1]] <  t4['elapsed'][[1]]
t5
t6
t7
t1
t3
t4
for (i in 1:100) {
t1 <- t1 + system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
t3 <- t3 + system.time(tapply(DT$pwgtp15,DT$SEX,mean))
t4 <- t4 + system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
t5 <- t5 + system.time(mean(DT$pwgtp15,by=DT$SEX))
t6 <- t6 + system.time(DT[,mean(pwgtp15),by=SEX])
}
t1
t2
t3
t4
t5
t6
tapply(DT$pwgtp15,DT$SEX,mean)
sapply(split(DT$pwgtp15,DT$SEX),mean)
DT[,mean(pwgtp15),by=SEX]
mean(DT$pwgtp15,by=DT$SEX)
library(kernlab)
installed.packages(kernlab)
installed.packages("kernlab")
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam[,1:5])
names(trainSpam)
set.seed(3435)
trainIndicator = rbinom(4601,size=1,prob=0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator==1,]
testSpam = spam[trainIndicator==0,]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve+1) ~ trainSpam$type)
trainSpam$numType = as.numeric(trainSpam$type)-1
costFunction = function(x,y) sum (x!=(y>0.5))
cvError = rep(NA,55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response="numType")
glmFit = glm(lmFormula, family = "binomial", data=trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
title: "Reproducible Research"
data
summary(data)
getwd()
setwd('..')
setwd('Reproducible Research/RepData_PeerAssessment1/')
d <- read.csv('activity.csv')
summary(d)
class(steps)
d$date
d$date[0]
d$date[[0]
d$date[[0]]
d$date[[0]]
test <- as.Date("2012-11-04")
class(test)
test
class("2012-11-04")
d.Date
d$Date
d$date
d$date[0]
d$date[0][1]
d$date[[0]]
d$date[[1]]
temp <- as.Date(d$date)
temp
class(temp)
class(d$date)
d$date <- as.Date(d$date)
class(d$date)
summary(date)
summary(d)
aggregate(d$steps, by=list(d$date), FUN=sum)
stepsbyday <- aggregate(d$steps, by=list(d$date), FUN=sum)
hist(stepsbyday)
?hist
hist(d$x)
d$x
hist(stepsbyday$x)
hist(stepsbyday$x)
mean(stepsbyday$x)
mean(stepsbyday[!is.na(x)]$x)
mean(stepsbyday[!is.na(stepsbyday$x)]$x)
mean(stepsbyday[!is.na(stepsbyday$x),]$x)
? median
?mean
mean(stepsbyday$x, na.rm=TRUE)
?hist
hist(stepsbyday$x, xlab = 'Histogram of Steps by Day')
hist(stepsbyday$x, xlab = 'Histogram of Steps by Day')
?hist
hist(stepsbyday$x, main = 'Histogram of Steps by Day')
?plot
plot(d$steps,d$date+d$interval)
d
stepsby5min <- aggregate(d$steps, by=list(d$interval), FUN=sum)
head(stepsby5min)
plot(stepsby5min$x,stepsby5min$Group.1)
plot(stepsby5min$x,stepsby5min$Group.1, rm.na=TRUE)
stepsby5min
?aggregate
stepsby5min <- aggregate(d$steps, by=list(d$interval), FUN=sum, na.action = na.omit)
stepsby5min
nrow(d)
stepsbyday <- aggregate(d$steps, by=list(d$date), FUN=sum, na.action = na.omit)
stepsbyday <- aggregate(d$steps, by=list(d$date), FUN="sum", na.action = na.omit)
stepsbyday <- aggregate(d$steps, by=list(d$date), FUN = sum, ..., na.action = na.omit)
d[d$date==as.Date("2012-10-01")]$steps
d[d$date==as.Date("2012-10-01"),]$steps
d[d$date==as.Date("2012-10-08"),]$steps
d[d$date==as.Date("2012-11-01"),]$steps
d[d$date==as.Date("2012-11-09"),]$steps
d[d$date==as.Date("2012-11-10"),]$steps
d[d$date==as.Date("2012-11-14"),]$steps
d[d$date==as.Date("2012-11-30"),]$steps
d[d$date==as.Date("2012-11-15"),]$steps
d[d$date==as.Date("2012-10-12"),]$steps
d[d$date==as.Date("2012-10-02"),]$steps
stepsbyday <- aggregate(d$steps, by=list(d$date), FUN="sum", na.rm=TRUE)
mean(stepsbyday)
mean(stepsbyday$x)
stepsby5min <- aggregate(d$steps, by=list(d$interval), FUN=sum, na.rm=TRUE)
stepsby5min
mean(stepsbyday)
mean(stepsbyday$x)
stepsbyday
stepsby5min <- aggregate(d$steps, by=list(d$interval), FUN=sum, na.rm=TRUE)
stepsbyday
plot(stepsby5min$x,stepsby5min$Group.1)
stepsby5min <- aggregate(d$steps, by=list(d$interval), FUN=sum, na.rm=TRUE)
stepsby5min
? plot
stepsby5min <- aggregate(d$steps, by=list(d$interval), FUN=mean, na.rm=TRUE)
stepsby5min
? which
which.max(stepsby5min$x)
stepsby5min$Group.1[which.max(stepsby5min$x)]
sum(is.na(d$steps))
sum(is.na(d$date))
sum(is.na(d$steps))
sum(is.na(d$interval))
nrow(d)
sum(is.na(d$steps)) / nrow(d)
d
head(d)
?colMeans
indx <- which(is.na(d$steps), arr.ind=TRUE)
?which
indx
length(indx)
d$steps[1]
d$steps[1]
d$interval[1]
dn <- d
stepsby5min[stepsby5min$Group.1==5,]$x
stepsby5min[stepsby5min$Group.1==0,]$x
stepsby5min[stepsby5min$Group.1==10,]$x
stepsby5min[stepsby5min$Group.1==15,]$x
dn[indx]$steps <- stepsby5min[stepsby5min$Group.1==dn$interval[indx],]$x
dn[1]$steps
indx
dn[1]$steps
dn$steps[1]
dn$steps[1] <- stepsby5min[stepsby5min$Group.1==dn$interval[1],]$x
dn$steps[1]
stepsby5min
dn$steps[indx] <- stepsby5min[stepsby5min$Group.1==dn$interval[indx],]$x
totalna <- sum(is.na(dn$steps))
totalna
totalna <- sum(is.na(data$steps))
totalna <- sum(is.na(d$steps))
totalna
indx <- which(is.na(dn$steps), arr.ind=TRUE)
ind
indx
dn <- d
sum(is.na(dn$steps))
indx <- which(is.na(d$steps))
indx
nrow(index)
length(index)
nrow(indx)
length(indx)
dn$steps[indx] <- stepsby5min[stepsby5min$Group.1==dn$interval[indx],]$x
dn$steps[indx]
temp <- stepsby5min$Group.1==dn$interval[indx]
temp
which(LETTERS == 'R')
which(stepsby5min$Group.1 == 0)
which(stepsby5min$Group.1 == 5)
which(stepsby5min$Group.1 == 10)
dn$steps[indx] <- stepsby5min[which(stepsby5min$Group.1==dn$interval[indx])]$x
dn$steps[indx] <- stepsby5min[which(stepsby5min$Group.1==dn$interval[indx]),]$x
dn$steps
stepsby5min[which(stepsby5min$Group.1==dn$interval[indx]),]$x
stepsby5min[which(stepsby5min$Group.1==0),]$x
stepsby5min[which(stepsby5min$Group.1==5),]$x
dn <- d
indx <- which(is.na(dn$steps), arr.ind=TRUE)
length(indx)
for (i in indx) {
dn$steps[i] <- stepsby5min[which(stepsby5min$Group.1==dn$interval[i]),]$x
}
indx2 <- which(is.na(dn$steps), arr.ind=TRUE)
length(indx2)
stepsby5min[which(stepsby5min$Group.1==0),]$x
stepsby5min[which(stepsby5min$Group.1==1),]$x
stepsby5min[which(stepsby5min$Group.1==5),]$x
stepsby5min[which(stepsby5min$Group.1==10),]$x
dn[indx]$steps
dn[indx,]$steps
dn <- d
indx <- which(is.na(dn$steps), arr.ind=TRUE)
length(indx)
dn[indx,]$steps <- stepsby5min[stepsby5min$Group.1==dn[indx,]$interval,]$x
indx2 <- which(is.na(dn$steps), arr.ind=TRUE)
length(indx2)
dn[1,]$steps
dn[1,]$interval
dn[indx2]
dn[indx2,]$steps
dn[indx,]$steps <- stepsby5min[which(stepsby5min$Group.1==dn[indx,]$interval),]$x
indx2 <- which(is.na(dn$steps), arr.ind=TRUE)
length(indx2)
?tapply
? names
? cbind
dn <- d
indx <- which(is.na(dn$steps), arr.ind=TRUE)
length(indx)
dn[1,]$steps
dn[1,]$interval
class(dn[1,]$interval)
class(dn[1,]$steps)
dn[indx,]$steps <- stepsby5min[stepsby5min$Group.1==dn[indx,]$interval,]$x
indx2 <- which(is.na(dn$steps), arr.ind=TRUE)
length(indx2)
dn <- d
indx
indx[,2]
indx[,1]
indx
indx[,]
for (i in indx) {
dn$steps[i] <- stepsby5min[which(stepsby5min$Group.1==dn$interval[i]),]$x
}
sum(is.na(dn$steps))
dn.stepsbyday <- aggregate(dn$steps, by=list(dn$date), FUN=sum, na.rm=TRUE)
mean(dn.stepsbyday$x)
median(dn.stepsbyday$x)
dn$weekday <- weekdays(dn$date)
head(dn)
?ifelse
weekend <- c("Saturday","Sunday")
dn$weekday <- ifelse(weekdays(dn$date) %in% weekend, 0, 1)
head(dn)
dn.stepsbyWeekend <- aggregate(dn$steps, by=list(data.nona$date), FUN=sum, na.rm=TRUE)
?aggregate
dn.stepsbyWeekend <- aggregate(dn$steps, by=0, FUN=mean, na.rm=TRUE)
dn.stepsbyWeekend <- aggregate(dn$steps, by=c(0), FUN=mean, na.rm=TRUE)
dn.stepsbyWeekend <- aggregate(dn$steps, by=list(0), FUN=mean, na.rm=TRUE)
?list
dn.stepsbyWeekend <- aggregate(dn$steps, by=list(dn$weekday), FUN=mean, na.rm=TRUE)
dn.stepsbyWeekend
dn.stepsbyWeekend <- aggregate(steps ~ interval+weekday, data = dn, mean)
dn.stepsbyWeekend
library(lattice)
? aes
?plot
plot(dn[dn$weekday==0,]$interval,dn[dn$weekday==0,]$steps)
plot(dn[dn$weekday==0,]$interval,dn[dn$weekday==0,]$steps, type='l')
plot(dn[dn$weekday==0,]$interval,dn[dn$weekday==0,]$steps, type='l')
ggplot
library(ggplot2)
ggplot
ggplot(dn.stepsbyWeekend, aes(interval, steps)) + geom_line() + facet_grid(weekday ~ .) +
xlab("5-minute interval") + ylab("Number of steps"))
ggplot(dn.stepsbyWeekend, aes(interval, steps) + geom_line() + facet_grid(weekday ~ .) +
xlab("5-minute interval") + ylab("Number of steps"))
ggplot(dn.stepsbyWeekend, aes(interval, steps)) + geom_line() + facet_grid(weekday ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
aggregate(d$interval)
aggregate(data$steps, by=list(data$interval), FUN=mean, na.rm=TRUE)
aggregate(d$steps, by=list(d$interval), FUN=mean, na.rm=TRUE)
?text
?par
